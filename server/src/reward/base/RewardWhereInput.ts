/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { ClaimedRewardListRelationFilter } from "../../claimedReward/base/ClaimedRewardListRelationFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { FavouriteRewardListRelationFilter } from "../../favouriteReward/base/FavouriteRewardListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";
import { OrganisationWhereUniqueInput } from "../../organisation/base/OrganisationWhereUniqueInput";
import { RewardImageWhereUniqueInput } from "../../rewardImage/base/RewardImageWhereUniqueInput";

@InputType()
class RewardWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  city?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ClaimedRewardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ClaimedRewardListRelationFilter)
  @IsOptional()
  @Field(() => ClaimedRewardListRelationFilter, {
    nullable: true,
  })
  claimedRewards?: ClaimedRewardListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  country?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  description?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  discount?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  expirationDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => FavouriteRewardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FavouriteRewardListRelationFilter)
  @IsOptional()
  @Field(() => FavouriteRewardListRelationFilter, {
    nullable: true,
  })
  favouriteRewards?: FavouriteRewardListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  latitude?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  longitude?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  miles?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: () => OrganisationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganisationWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganisationWhereUniqueInput, {
    nullable: true,
  })
  organisation?: OrganisationWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => RewardImageWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RewardImageWhereUniqueInput)
  @IsOptional()
  @Field(() => RewardImageWhereUniqueInput, {
    nullable: true,
  })
  rewardImage?: RewardImageWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  title?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  totalCount?: StringNullableFilter;
}

export { RewardWhereInput as RewardWhereInput };
