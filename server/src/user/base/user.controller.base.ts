/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { ClaimedRewardFindManyArgs } from "../../claimedReward/base/ClaimedRewardFindManyArgs";
import { ClaimedReward } from "../../claimedReward/base/ClaimedReward";
import { ClaimedRewardWhereUniqueInput } from "../../claimedReward/base/ClaimedRewardWhereUniqueInput";
import { CompanyDetailFindManyArgs } from "../../companyDetail/base/CompanyDetailFindManyArgs";
import { CompanyDetail } from "../../companyDetail/base/CompanyDetail";
import { CompanyDetailWhereUniqueInput } from "../../companyDetail/base/CompanyDetailWhereUniqueInput";
import { FavouriteRewardFindManyArgs } from "../../favouriteReward/base/FavouriteRewardFindManyArgs";
import { FavouriteReward } from "../../favouriteReward/base/FavouriteReward";
import { FavouriteRewardWhereUniqueInput } from "../../favouriteReward/base/FavouriteRewardWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/claimedRewards")
  @ApiNestedQuery(ClaimedRewardFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClaimedReward",
    action: "read",
    possession: "any",
  })
  async findManyClaimedRewards(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ClaimedReward[]> {
    const query = plainToClass(ClaimedRewardFindManyArgs, request.query);
    const results = await this.service.findClaimedRewards(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        qrCodeUrl: true,

        reward: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/claimedRewards")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectClaimedRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ClaimedRewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      claimedRewards: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/claimedRewards")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateClaimedRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ClaimedRewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      claimedRewards: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/claimedRewards")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectClaimedRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ClaimedRewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      claimedRewards: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/companyDetails")
  @ApiNestedQuery(CompanyDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CompanyDetail",
    action: "read",
    possession: "any",
  })
  async findManyCompanyDetails(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<CompanyDetail[]> {
    const query = plainToClass(CompanyDetailFindManyArgs, request.query);
    const results = await this.service.findCompanyDetails(params.id, {
      ...query,
      select: {
        businessAddress: true,
        businessCategory: true,
        businessEmail: true,
        businessPhoneNumber: true,
        companyName: true,
        companyUrl: true,
        createdAt: true,
        cvrNumber: true,
        id: true,
        logo: true,
        shortIntroductionToTheCompany: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/companyDetails")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectCompanyDetails(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CompanyDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyDetails: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/companyDetails")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateCompanyDetails(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CompanyDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyDetails: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/companyDetails")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectCompanyDetails(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CompanyDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyDetails: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/favouriteRewards")
  @ApiNestedQuery(FavouriteRewardFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FavouriteReward",
    action: "read",
    possession: "any",
  })
  async findManyFavouriteRewards(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FavouriteReward[]> {
    const query = plainToClass(FavouriteRewardFindManyArgs, request.query);
    const results = await this.service.findFavouriteRewards(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        rewardId: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/favouriteRewards")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectFavouriteRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FavouriteRewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteRewards: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/favouriteRewards")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateFavouriteRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FavouriteRewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteRewards: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/favouriteRewards")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectFavouriteRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FavouriteRewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteRewards: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
