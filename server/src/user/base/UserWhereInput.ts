/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ClaimedRewardListRelationFilter } from "../../claimedReward/base/ClaimedRewardListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { FavouriteRewardListRelationFilter } from "../../favouriteReward/base/FavouriteRewardListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: () => ClaimedRewardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ClaimedRewardListRelationFilter)
  @IsOptional()
  @Field(() => ClaimedRewardListRelationFilter, {
    nullable: true,
  })
  claimedRewards?: ClaimedRewardListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FavouriteRewardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FavouriteRewardListRelationFilter)
  @IsOptional()
  @Field(() => FavouriteRewardListRelationFilter, {
    nullable: true,
  })
  favouriteRewards?: FavouriteRewardListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;
}

export { UserWhereInput as UserWhereInput };
