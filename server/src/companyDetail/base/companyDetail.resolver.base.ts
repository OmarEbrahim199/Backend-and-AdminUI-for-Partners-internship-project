/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCompanyDetailArgs } from "./CreateCompanyDetailArgs";
import { UpdateCompanyDetailArgs } from "./UpdateCompanyDetailArgs";
import { DeleteCompanyDetailArgs } from "./DeleteCompanyDetailArgs";
import { CompanyDetailFindManyArgs } from "./CompanyDetailFindManyArgs";
import { CompanyDetailFindUniqueArgs } from "./CompanyDetailFindUniqueArgs";
import { CompanyDetail } from "./CompanyDetail";
import { User } from "../../user/base/User";
import { CompanyDetailService } from "../companyDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CompanyDetail)
export class CompanyDetailResolverBase {
  constructor(
    protected readonly service: CompanyDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CompanyDetail",
    action: "read",
    possession: "any",
  })
  async _companyDetailsMeta(
    @graphql.Args() args: CompanyDetailFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CompanyDetail])
  @nestAccessControl.UseRoles({
    resource: "CompanyDetail",
    action: "read",
    possession: "any",
  })
  async companyDetails(
    @graphql.Args() args: CompanyDetailFindManyArgs
  ): Promise<CompanyDetail[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CompanyDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CompanyDetail",
    action: "read",
    possession: "own",
  })
  async companyDetail(
    @graphql.Args() args: CompanyDetailFindUniqueArgs
  ): Promise<CompanyDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompanyDetail)
  @nestAccessControl.UseRoles({
    resource: "CompanyDetail",
    action: "create",
    possession: "any",
  })
  async createCompanyDetail(
    @graphql.Args() args: CreateCompanyDetailArgs
  ): Promise<CompanyDetail> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompanyDetail)
  @nestAccessControl.UseRoles({
    resource: "CompanyDetail",
    action: "update",
    possession: "any",
  })
  async updateCompanyDetail(
    @graphql.Args() args: UpdateCompanyDetailArgs
  ): Promise<CompanyDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyDetail)
  @nestAccessControl.UseRoles({
    resource: "CompanyDetail",
    action: "delete",
    possession: "any",
  })
  async deleteCompanyDetail(
    @graphql.Args() args: DeleteCompanyDetailArgs
  ): Promise<CompanyDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: CompanyDetail): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
